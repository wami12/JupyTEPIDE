version: "3"
services:
  jupytepide-hub:
    # build an image with SwarmSpawner and our jupyterhub_config.py
    env_file:
      - .env
      - secrets/oauth.env
    build:
      context: .
      dockerfile: Dockerfile
    image: "jupytepide/jupyterhub:0.9.2-1.3.1"
    container_name: jupytepide-hub
    # mount the docker socket
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
    - ./jupyterhub_config.py:/tmp/jupyterhub_config.py
    - ./run-from-compose.sh:/run-from-compose.sh
    - /opt/data/priv/:/opt/data/priv/
    - /opt/var/:/opt/var/
    networks:
    - jupyterhub-net
    # This is necessary to prevent the singleton hub from using its service number as its hostname
    ports:
    - "8000:8000"
    hostname: jupytepide-hub
    environment:
      DOCKER_NETWORK_NAME: ${DOCKER_NETWORK_NAME}
      DOCKER_SPAWN_NOTEBOOK_IMAGE: ${DOCKER_SPAWN_NOTEBOOK_IMAGE}
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: ${DOCKER_NOTEBOOK_DIR}
      SPAWN_USER: ${SPAWN_USER}
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == manager
    command: sh /run-from-compose.sh

  nginx:
    env_file: .env
    image: linuxserver/letsencrypt
    container_name: jupytepide-nginx
    hostname: jupytepide-nginx
    networks:
    - jupyterhub-net
    # expose the proxy to the world
    ports:
    - "80:80"
    - "443:443"
    volumes:
    - "nginx_volume:/config"
    - /home/eouser/jupytep-dev/swarm/letsencrypt_container_nginx.conf:/config/nginx/site-confs/default
    environment:
      EMAIL: ${EMAIL}
      URL: ${URL}
      SUBDOMAINS: cloud,demo,try,notebooks
      ONLY_SUBDOMAINS: 'true'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == manager
    cap_add:
    - NET_ADMIN

  postgis:
    image: kartoza/postgis:9.6-2.4
    container_name: jupytepide-postgis
    networks:
    - jupyterhub-net
    volumes:
    - postgis-db-data:/var/lib/postgresql
    ports:
    - "25432:5432"
    env_file:
    - postgis.env
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == manager
    restart: on-failure
    healthcheck:
      test: "exit 0"

  geoserver:
    image: jupytepide/geoserver:2.13.0-1.0
    container_name: jupytepide-geoserver
    networks:
    - jupyterhub-net
    volumes:
    - geoserver-data:/opt/geoserver/data_dir
    ports:
    - "8090:8080"
    hostname: jupytepide-geoserver
    restart: on-failure
    env_file:
    - geoserver.env
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == manager
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  mapnik:
    image: "jupytepide/mapnik-flask:1.2.3"
    container_name: jupytepide-mapnik
    networks:
    - jupyterhub-net
    ports:
    - "9443:80"
    hostname: jupytepide-mapnik
    volumes:
    - /opt/var/mapnik:/opt/var/mapnik
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == manager

  pywps:
    image: "geocontainers/pywps-demo:latest"
    container_name: jupytepide-pywps
    networks:
    - jupyterhub-net
    ports:
    - "5000:5000"
    hostname: jupytepide-pywps
    volumes:
      - /opt/data/pub/shared/pywps-demo/workdir:/pywps-demo/workdir
      - /opt/data/pub/shared/pywps-demo/outputs:/pywps-demo/outputs
      - /opt/data/pub/shared/pywps-demo/processes:/pywps-demo/processes
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == manager

  portainer:
    image: portainer/portainer
    container_name: jupytepide-portainer
    networks:
      - jupyterhub-net
    hostname: jupytepide-portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data

networks:
  jupyterhub-net:
    external:
      name: jupytepide-swarm-net

volumes:
  db:
    external:
      name: ${DB_VOLUME_DATA}
  nginx_volume:
    external:
      name: ${NGINX_VOLUME_DATA}
  geoserver-data:
    external:
      name: ${GEOSERVER_VOLUME_DATA}
  postgis-db-data:
    external:
      name: ${POSTGIS_VOLUME_DATA}
  portainer-data:
    external:
      name: ${PORTAINER_VOLUME_DATA}