{"groups":[{"group_id":1,"group_name":"OTB","group_level":0},{"group_id":2,"group_name":"SNAP","group_level":0},{"group_id":3,"group_name":"WMS","group_level":0},{"group_id":4,"group_name":"WPS","group_level":0},{"group_name":"Other","group_id":5},{"group_name":"Snippets support","group_id":6},{"group_name":"TESTING GROUP 1","group_id":7}],"code_snippets":[{"group":4,"name":"Simple WPS process using URLlib","code":["import urllib.request","from urllib.parse import quote, urlencode","import pprint","import re","","data=urlencode({'service':'WPS',","                'version':'1.1.0',","                'request':'execute',","                'identifier':'JTS:area',","                'datainputs':'geom=POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))'})","request='185.52.194.216:8080/geoserver/wps?'+data","request='http://'+quote(request,safe='%/:=&?~#+!$,;'@()*[]')","with urllib.request.urlopen(request) as response:","        h=response.read()","xx=re.search('LiteralData>(.*)</wps:LiteralData>',str(h),re.DOTALL)","print(xx.group(1))"]},{"group":3,"name":"Read WMS Layer styles","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms['Raster'].styles"]},{"group":3,"name":"Read WMS Layer CRS options","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms['Raster'].crsOptions"]},{"group":3,"name":"Read WMS Layer WGS84 bounds","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms['Raster'].boundingBoxWGS84"]},{"group":3,"name":"Check WMS Layer opacity","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms['Raster'].opaque"]},{"group":3,"name":"Check WMS Layer queryable","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms['Raster'].queryable"]},{"group":3,"name":"Read WMS Layer title","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms['Raster'].title"]},{"group":3,"name":"Read WMS title","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms.identification.type"]},{"group":3,"name":"List WMS contents","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","list(wms.contents)"]},{"group":3,"name":"Read WMS type","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","wms.identification.type"]},{"group":2,"name":"N1 Read Metadata","code":["import snappy","class N1Metadata:","    SPH={}","    MPH={}","    DSD={}","    Quality_ADS={}","    Scaling_Factor_GADS={}","    Tie_points_ADS={}","    def __init__(self,filename):","        import snappy","        self.filename=filename","        try:","            self.product=snappy.ProductIO.readProduct(filename)","        except IOError:","            print('Error opening file....')","            return 0","        metadata=self.product.getMetadataRoot()","        element=metadata.getElement('SPH')","        for i in element.getAttributes():","            self.SPH[i.getName()]=i.getDataElems()[0]","        element=metadata.getElement('MPH')","        for i in element.getAttributes():","            self.MPH[i.getName()]=i.getDataElems()[0]","        element=metadata.getElement('DSD')","        for i in element.getAttributes():","            self.DSD[i.getName()]=i.getDataElems()[0]","        element=metadata.getElement('Quality_ADS')","        for i in element.getAttributes():","            self.Quality_ADS[i.getName()]=i.getDataElems()[0]","        element=metadata.getElement('Scaling_Factor_GADS')","        for i in element.getAttributes():","            self.Scaling_Factor_GADS[i.getName()]=i.getDataElems()[0]","        element=metadata.getElement('Tie_points_ADS')","        for i in element.getAttributes():","            self.Tie_points_ADS[i.getName()]=i.getDataElems()[0]","","    def __repr__(self):","        from pprint import pprint,pformat","        from io import StringIO","        s = StringIO()","        pprint(self.SPH, s)","        m = StringIO()","        pprint(self.SPH, m)","        d = StringIO()","        pprint(self.DSD, d)","        Q = StringIO()","        pprint(self.Quality_ADS, Q)","        Sc = StringIO()","        pprint(self.Scaling_Factor_GADS, Sc)","        T = StringIO()","        pprint(self.Tie_points_ADS, T)","        return ('SPH:\n'+s.getvalue()+'\nMPH:\n'+m.getvalue()+'\nDSD:\n'+d.getvalue()","               +'\nQuality ADS:\n'+Q.getvalue()+'\nScaling Factor GADS:\n'+Sc.getvalue()+'\nTie points:\n'+T.getvalue())","","a=N1Metadata('/eodata/Envisat/Meris/FRS/2002/05/17/MER_FRS_1PPEPA20020517_140027_000000982006_00053_01109_0979.N1')","print(a)"]},{"group":1,"name":"Vector Data Validation","code":["import sys","import os","import otbApplication","file_1 = ''","file_2 = ''","VectorDataDSValidation = otbApplication.Registry.CreateApplication('VectorDataDSValidation')","VectorDataDSValidation.SetParameterString('in', file_1)","VectorDataDSValidation.SetParameterStringList('belsup', ['cdbTvComputePolylineFeatureFromImage_LI_NOBUIL_gt.shp'])","VectorDataDSValidation.SetParameterString('descmod', file_2)","VectorDataDSValidation.SetParameterString('out', 'VectorDataDSValidation.shp')","VectorDataDSValidation.ExecuteAndWriteOutput()"]},{"group":1,"name":"Line Segment Detection","code":["import sys","import os","import otbApplication","file_1 = ''","LineSegmentDetection = otbApplication.Registry.CreateApplication('LineSegmentDetection')","LineSegmentDetection.SetParameterString('in', file_1)","LineSegmentDetection.SetParameterString('out', 'LineSegmentDetection.shp')","LineSegmentDetection.ExecuteAndWriteOutput()"]},{"group":2,"name":"Load product","code":["import snappy","import numpy as np","import matplotlib.pyplot as plt","#parameters for atithmetic transformation","a= 1.15","b=0","#source image","file='/eodata/Envisat/Meris/FRS/2012/04/08/MER_FRS_1PPEPA20120408_105857_000005063113_00267_52867_0978.N1'"]},{"group":4,"name":"Get WPS info","code":["from owslib.wps import WebProcessingService, monitorExecution, printInputOutput","from os import system","import time","from owslib.etree import etree","","wps_url = 'http://localhost:8080/geoserver/wps'","wps = WebProcessingService(url=wps_url, verbose=False)","print (wps.identification.title + ':' + wps.version)"]},{"group":3,"name":"Connect WMS","code":["from owslib.wms import WebMapService","wms = WebMapService('http://mapy.geoportal.gov.pl/wss/service/img/guest/ORTO/MapServer/WMSServer', version='1.1.1')","print(wms.identification.type)","print(wms.identification.title)","print(list(wms.contents))","print(wms['Raster'].boundingBox)"]},{"group":5,"name":"Display image","code":["import matplotlib.image as mpimg","fig, ax = plt.subplots(figsize=(20, 10))","img=mpimg.imread('tmp.jpg')","imgplot = plt.imshow(img)","plt.show()"]},{"group":2,"name":"Snappy GPT example","code":["from snappyhelpers import pyHashMap","from snappy import ProductIO, GPF","","p = ProductIO.readProduct('/eodata/Sentinel-2/MSI/L1C/2017/09/13/S2A_MSIL1C_20170913T024941_N0205_R046_T49MHM_20170913T024944.SAFE')","print(p.getProductReader())","GPF.getDefaultInstance().getOperatorSpiRegistry().loadOperatorSpis() # Load all available operators","parameters=pyHashMap({'greenFactor': 1,","  'greenSourceBand': 'B1',","  'nirFactor': 1,","  'nirSourceBand': 'B2'})","","refl_product = GPF.createProduct('GndviOp', parameters.giveHashMap(), p) # compute the product from input called sub_product","# op = SubsetOp()","for i in refl_product.getBandNames():","    print(i)"]},{"group":1,"name":"Setup OTB","code":["import sys","import os","sys.path.append('/usr/lib/otb/python')","try:","    user_paths = os.environ['PYTHONPATH'].split(os.pathsep)","except KeyError:","","    user_paths = []","os.environ['OTB_APPLICATION_PATH']='/usr/lib/otb/applications'","import otbApplication"]},{"group":1,"name":"OTB ROI","code":["from PIL import Image as PILImage","import numpy as np","import matplotlib.pyplot as plt","","pilimage = PILImage.open('obrazek.tiff')","plt.imshow(pilimage)","plt.show()","","npimage = np.asarray(pilimage)","ExtractROI = otbApplication.Registry.CreateApplication('ExtractROI')","ExtractROI.SetVectorImageFromNumpyArray('in', npimage)","ExtractROI.SetParameterInt('startx', 140)","ExtractROI.SetParameterInt('starty', 120)","ExtractROI.SetParameterInt('sizex', 150)","ExtractROI.SetParameterInt('sizey', 150)","ExtractROI.Execute()","ExtractOutput = ExtractROI.GetVectorImageAsNumpyArray('out')","output_pil_image = PILImage.fromarray(np.uint8(ExtractOutput))","imshow(output_pil_image)","plt.show()"]},{"group":5,"name":"Web Map Browser","code":["from IPython.display import clear_output, Javascript, display","from nbformat import current","","import io","import os, fnmatch","from datetime import datetime","import urllib.request","from urllib.parse import quote","from pprint import pprint","import json","import subprocess","","import ipywidgets as widgets","from ipywidgets import Layout, Box, HBox,DatePicker,interact","","","","html_metadata=widgets.HTML(","    value=''",")","from ipyleaflet import TileLayer","from ipyleaflet import (","    Map,","    Marker,","    TileLayer, ImageOverlay,","    Polyline, Polygon, Rectangle, Circle, CircleMarker,","    GeoJSON,","    DrawControl,",")","","# slider = widgets.slider(4)","","t=TileLayer()","t.url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'","t.opacity=0.6","m=Map(zoom=1)","","wkt=''","layers=[]","lop=[]","m.add_layer(t)","","","def h(opacity):    ","    m.remove_layer(t) ","    t.opacity=opacity/100","    m.add_layer(t)    ","    ","","interact(h, opacity=(0,100));","m"]},{"group":1,"name":"Testowanie","code":["%%js\n//Jupytepide.addGroup({ group_id: 7, group_name: \"JESZCZE 59999\", group_level: 0 })\n//Jupytepide.deleteGroup({ group_id: 7, group_name: \"OTHERS\", group_level: 0 })\n//Jupytepide.addSnippet({ group: 9, name: \"nowy snippet\", code: [\"Kajko\",\"i Kokosz\", \"i Miluś\"] })\nJupytepide.deleteSnippet({ group: 1, name: \"TESTING\"})"]},{"group":1,"name":"Jeszcze jedno","code":["%%js\n//Jupytepide.addGroup({ group_id: 7, group_name: \"JESZCZE 59999\", group_level: 0 })\n//Jupytepide.deleteGroup({ group_id: 7, group_name: \"OTHERS\", group_level: 0 })\n//Jupytepide.addSnippet({ group: 9, name: \"nowy snippet\", code: [\"Kajko\",\"i Kokosz\", \"i Miluś\"] })\nJupytepide.deleteSnippet({ group: 1, name: \"TESTING\"})"]},{"group":6,"name":"Menu group add - sample","code":["%%js\nJupytepide.addGroup({group_name: \"TESTING GROUP 2\"})"]}]}