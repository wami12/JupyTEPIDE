# Copyright (c) JupyTEP IDE Development Team.
# Distributed under the terms of the Modified BSD License.
FROM jupyter/minimal-notebook

LABEL maintainer="JupyTEP IDE Project <jupytep@wasat.pl>"

USER root

# Fix sh
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# apt-get installs
RUN apt-get update -qq && \
    apt-get install -y -qq --no-install-recommends build-essential software-properties-common nano mc && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install JDK 8
RUN \
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \
add-apt-repository -y ppa:webupd8team/java > /dev/null 2>&1 && \
apt-get -q update && \
apt-get install -y oracle-java8-installer tar && \
apt-get install -y oracle-java8-set-default && \
rm -rf /var/lib/apt/lists/* && \
rm -rf /var/cache/oracle-jdk8-installer

# Define commonly used JAVA_HOME variable
ENV JAVA_HOME /usr/lib/jvm/java-8-oracle

#Add JAI and ImageIO for great speedy speed.
WORKDIR /tmp
# A little logic that will fetch the JAI and JAI ImageIO tar file if it
# is not available locally in the resources dir
RUN if [ ! -f /tmp/resources/jai-1_1_3-lib-linux-amd64.tar.gz ]; then \
    wget --quiet http://download.java.net/media/jai/builds/release/1_1_3/jai-1_1_3-lib-linux-amd64.tar.gz -P ./resources;\
    fi; \
    if [ ! -f /tmp/resources/jai_imageio-1_1-lib-linux-amd64.tar.gz ]; then \
    wget --quiet http://download.java.net/media/jai-imageio/builds/release/1.1/jai_imageio-1_1-lib-linux-amd64.tar.gz -P ./resources;\
    fi; \
    mv resources/jai-1_1_3-lib-linux-amd64.tar.gz ./ && \
    mv resources/jai_imageio-1_1-lib-linux-amd64.tar.gz ./ && \
    gunzip -c --quiet jai-1_1_3-lib-linux-amd64.tar.gz | tar xf - && \
    gunzip -c --quiet jai_imageio-1_1-lib-linux-amd64.tar.gz | tar xf - && \
    mv /tmp/jai-1_1_3/lib/*.jar $JAVA_HOME/jre/lib/ext/ && \
    mv /tmp/jai-1_1_3/lib/*.so $JAVA_HOME/jre/lib/amd64/ && \
    mv /tmp/jai_imageio-1_1/lib/*.jar $JAVA_HOME/jre/lib/ext/ && \
    mv /tmp/jai_imageio-1_1/lib/*.so $JAVA_HOME/jre/lib/amd64/ && \
    rm /tmp/jai-1_1_3-lib-linux-amd64.tar.gz && \
    rm -r /tmp/*


# Conda installs
RUN conda install --quiet --yes -c conda-forge \
    'nb_conda' \
    'nb_conda_kernels' && \
    fix-permissions $CONDA_DIR

RUN conda install --quiet --yes -c anaconda-cluster \
    'apache-maven' && \
    fix-permissions $CONDA_DIR


# Create a Python 3.4 environment using conda including at least the ipython kernel
# and the kernda utility. Add any additional packages you want available for use
# in a Python 3.4 notebook to the first line here (e.g., pandas, matplotlib, etc.)
RUN conda create --quiet --yes -p $CONDA_DIR/envs/python34 python=3.4 ipython ipykernel && \
    conda clean -tipsy

USER root

# Create a global kernelspec in the image and modify it so that it properly activates
# the python34 conda environment.
RUN $CONDA_DIR/envs/python34/bin/python -m ipykernel install && \
    /bin/bash -c "source activate python34"

WORKDIR /tmp

# Download and install ESA SNAP toolbox (with all components)
RUN wget --quiet http://step.esa.int/downloads/5.0/installers/esa-snap_all_unix_5_0.sh && \
    chmod +x esa-snap_all_unix_5_0.sh && \
    /bin/bash "esa-snap_all_unix_5_0.sh" -q

# Install and configure Snappy
RUN git clone https://github.com/bcdev/jpy.git && \
    cd /tmp/jpy  && \
    python setup.py --quiet --maven bdist_wheel > /dev/null 2>&1

USER $NB_USER

RUN mkdir .snap && \
    mkdir .snap/snap-python && \
    mkdir .snap/snap-python/snappy && \
    cp /tmp/jpy/dist/jpy-0.9.0.dev1-cp36-cp36m-linux_x86_64.whl ".snap/snap-python/snappy" && \
    cd /opt/snap/bin && \
    ./snappy-conf /opt/conda/envs/python34/bin/python

USER root
RUN cp -R /home/jovyan/.snap/snap-python/snappy /opt/conda/envs/python34/lib/python3.4/site-packages/ && \
    rm -r /tmp/* && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

WORKDIR /home/$NB_USER
USER $NB_USER


